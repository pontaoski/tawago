type Kind = int64;

type Identifier = `struct {
    Name string
    Pos  Span
}`;

type Type =
    | Ident of Identifier
    | FunctionPointer of `struct {
        Arguments []Type
        Returns   *Type
    }`
    | Struct of `[]struct {
        Ident string
        Kind Type
    }`;

type Literal =
    | Integer of int64
    | StructLiteral of `struct {
        Ident   Identifier
        Fields map[string]Expression
    }`
    | StringLiteral of string;

type Expression =
    | Lit of Literal
    | Var of Identifier
    | Declaration of `struct {
        To      Identifier
        Value   Expression
    }`
    | Field of `struct {
        Of   Expression
        Ident Identifier
    }`
    | MutDeclaration of `struct {
        To      Identifier
        Value   Expression
    }`
    | Assignment of `struct {
        To    Identifier
        Value Expression
        Pos   Span
    }`
    | FieldAssignment of `struct {
        Struct Expression
        Field  Identifier
        Value  Expression
        Pos    Span
    }`
    | Call of `struct {
        Function  Identifier
        Arguments []Expression
    }`
    | Allocation of `struct {
        PutOnHeap Expression
    }`
    | Freeing of `struct {
        RemoveFromHeap Expression
    }`
    | Block of `[]Expression`
    | If of `struct {
        Condition Expression
        Then      Expression
        Else      Expression
    }`;

type TopLevel =
    | Func of `struct {
        Ident Identifier
        Arguments []struct{
            Ident Identifier
            Kind Type
        }

        Returns *Type
        Expr    Expression
    }`
    | Import of string
    | TypeDeclaration of `struct {
        Ident Identifier
        Kind Type
    }`;

type ASTNode =
    | T of TopLevel
    | E of Expression;
